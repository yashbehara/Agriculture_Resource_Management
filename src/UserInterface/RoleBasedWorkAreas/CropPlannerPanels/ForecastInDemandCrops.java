/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.RoleBasedWorkAreas.CropPlannerPanels;

import Business.Models.Crop;
import Business.Models.CropSalesRelation;
import static Utils.HistoricalData.futureMarketData;
import static Utils.HistoricalData.futureSeasonData;
import static Utils.HistoricalData.marketBasedData;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yash
 */
public class ForecastInDemandCrops extends javax.swing.JPanel {

    /**
     * Creates new form ForecastInDemandCrops
     */
    ArrayList<Crop> selectedCrops;
    List<Crop> cropsList = new ArrayList<>();

    public ForecastInDemandCrops(ArrayList<Crop> selectedCrops
) {
        initComponents();
        this.selectedCrops = selectedCrops;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        seasonForecastLabel = new javax.swing.JLabel();
        marketForecastLabel = new javax.swing.JLabel();
        seasonForecastTxtField = new javax.swing.JTextField();
        marketForecastTxtField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        seasonForecastTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        marketForecastTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        seasonForecastBtn = new javax.swing.JButton();
        marketForecastBtn = new javax.swing.JButton();
        addToSchedSeasonBtn = new javax.swing.JButton();
        addToSchedMarketBtn = new javax.swing.JButton();

        jTextField2.setText("jTextField2");

        setBackground(new java.awt.Color(255, 255, 255));
        setOpaque(false);

        jLabel1.setBackground(new java.awt.Color(204, 255, 255));
        jLabel1.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel1.setText("Forecast Data");
        jLabel1.setOpaque(true);

        seasonForecastLabel.setBackground(new java.awt.Color(204, 255, 255));
        seasonForecastLabel.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        seasonForecastLabel.setText("Season Based Forecast");
        seasonForecastLabel.setOpaque(true);

        marketForecastLabel.setBackground(new java.awt.Color(204, 255, 255));
        marketForecastLabel.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        marketForecastLabel.setText("Market Based Forecast");
        marketForecastLabel.setOpaque(true);

        jScrollPane1.setOpaque(false);

        seasonForecastTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Crop", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(seasonForecastTable);

        jScrollPane2.setOpaque(false);

        marketForecastTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Crop", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(marketForecastTable);

        seasonForecastBtn.setText("Get Forecast");
        seasonForecastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonForecastBtnActionPerformed(evt);
            }
        });

        marketForecastBtn.setText("Get Forecast");
        marketForecastBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marketForecastBtnActionPerformed(evt);
            }
        });

        addToSchedSeasonBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\deepa\\OneDrive\\Desktop\\plus.png")); // NOI18N
        addToSchedSeasonBtn.setText("Add to Schedule");
        addToSchedSeasonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToSchedSeasonBtnActionPerformed(evt);
            }
        });

        addToSchedMarketBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\deepa\\OneDrive\\Desktop\\plus.png")); // NOI18N
        addToSchedMarketBtn.setText("Add to Schedule");
        addToSchedMarketBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToSchedMarketBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(seasonForecastLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(seasonForecastBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(seasonForecastTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(77, 77, 77)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 110, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(addToSchedSeasonBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(marketForecastTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(marketForecastLabel)
                            .addComponent(marketForecastBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(addToSchedMarketBtn))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addToSchedSeasonBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(seasonForecastLabel)
                        .addGap(18, 18, 18)
                        .addComponent(seasonForecastTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(seasonForecastBtn)
                        .addGap(36, 36, 36)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(marketForecastLabel)
                        .addGap(18, 18, 18)
                        .addComponent(marketForecastTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(marketForecastBtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addToSchedMarketBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void seasonForecastBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonForecastBtnActionPerformed
        // TODO add your handling code here:
        String seasonInput = seasonForecastTxtField.getText();
        if(!seasonInput.isBlank())
        loadSeasonTableData(seasonInput);
    }//GEN-LAST:event_seasonForecastBtnActionPerformed

    private void marketForecastBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marketForecastBtnActionPerformed
        // TODO add your handling code here:
       try {
            Integer year = Integer.parseInt(marketForecastTxtField.getText());

            if (year != null && year > 2023) {
                // The input year is greater than 2023, so load the data
                loadMarketTableData(year);
            } else {
                // Display an error message or take appropriate action for invalid input
                JOptionPane.showMessageDialog(
                    null,
                    "Please enter a year greater than 2023.",
                    "Invalid Input",
                    JOptionPane.ERROR_MESSAGE
                );
            }
       } catch (NumberFormatException e) {
            // Handle the case where the input is not a valid integer
            JOptionPane.showMessageDialog(
                null,
                "Please enter a valid integer year.",
                "Invalid Input",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_marketForecastBtnActionPerformed

    private void addToSchedSeasonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToSchedSeasonBtnActionPerformed
        // TODO add your handling code here:
//        System.out.println("crops planner"+ cropPlannerScheduleList);
      int row = seasonForecastTable.getSelectedRow();
      if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String cropName = (String) seasonForecastTable.getValueAt(row, 0);

        // Check if a crop with the same name already exists in selectedCrops
        boolean cropAlreadyExists = false;
        for (Crop crop : selectedCrops) {
            if (crop.getName().equalsIgnoreCase(cropName)) {
                cropAlreadyExists = true;
                return; // Exit the loop if a matching crop is found
            }
        }

        if (cropAlreadyExists) {
            JOptionPane.showMessageDialog(null, "Crop with the same name already exists in the list", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            // Search for the crop in topCropsList and add it to selectedCrops if found
            for (Crop crop : cropsList) {
                if (crop.getName().equalsIgnoreCase(cropName)) {
                    selectedCrops.add(crop);
                    JOptionPane.showMessageDialog(null, "Crop successfully added to schedule", "Information", JOptionPane.INFORMATION_MESSAGE);
                    return; // Exit the loop once the crop is added
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Crop not found in the top crops list", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_addToSchedSeasonBtnActionPerformed

    private void addToSchedMarketBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToSchedMarketBtnActionPerformed
        // TODO add your handling code here:
//         System.out.println("crops planner"+ cropPlannerScheduleList);
       int row = marketForecastTable.getSelectedRow();
       if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String cropName = (String) marketForecastTable.getValueAt(row, 0);

        // Check if a crop with the same name already exists in selectedCrops
        boolean cropAlreadyExists = false;
        for (Crop crop : selectedCrops) {
            if (crop.getName().equalsIgnoreCase(cropName)) {
                cropAlreadyExists = true;
                return; // Exit the loop if a matching crop is found
            }
        }

        if (cropAlreadyExists) {
            JOptionPane.showMessageDialog(null, "Crop with the same name already exists in the list", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            // Search for the crop in topCropsList and add it to selectedCrops if found
            for (Crop crop : cropsList) {
                if (crop.getName().equalsIgnoreCase(cropName)) {
                    selectedCrops.add(crop);
                    JOptionPane.showMessageDialog(null, "Crop successfully added to schedule", "Information", JOptionPane.INFORMATION_MESSAGE);
                    return; // Exit the loop once the crop is added
                }
            }
        }

        JOptionPane.showMessageDialog(null, "Crop not found in the top crops list", "Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_addToSchedMarketBtnActionPerformed


    public void loadSeasonTableData(String season) {
        
        ArrayList<CropSalesRelation> salesRelations = futureSeasonData.get(season);

        Collections.sort(salesRelations, new Comparator<CropSalesRelation>() {
            @Override
            public int compare(CropSalesRelation o1, CropSalesRelation o2) {
                // Compare in descending order based on sales quantity
                return Integer.compare(o2.getSales().getQuantity(), o1.getSales().getQuantity());
            }
        });

        DefaultTableModel model = (DefaultTableModel) seasonForecastTable.getModel();
        model.setRowCount(0);
    
        for (int i = 0; i < salesRelations.size(); i++) {
            CropSalesRelation obj = salesRelations.get(i);
            Object[] row = new Object[2];
            row[0] = obj.getCrop().getName(); // Crop Name
            row[1] = obj.getSales().getQuantity(); // Quantity
            model.addRow(row);
            cropsList.add(obj.getCrop());
        }
    }
    
    public void loadMarketTableData(Integer year) {
        
        ArrayList<CropSalesRelation> salesRelations = futureMarketData.get(year);

        Collections.sort(salesRelations, new Comparator<CropSalesRelation>() {
            @Override
            public int compare(CropSalesRelation o1, CropSalesRelation o2) {
                // Compare in descending order based on sales quantity
                return Integer.compare(o2.getSales().getQuantity(), o1.getSales().getQuantity());
            }
        });

        DefaultTableModel model = (DefaultTableModel) marketForecastTable.getModel();
        model.setRowCount(0);
    
        for (int i = 0; i < salesRelations.size(); i++) {
            CropSalesRelation obj = salesRelations.get(i);
            Object[] row = new Object[2];
            row[0] = obj.getCrop().getName(); // Crop Name
            row[1] = obj.getSales().getQuantity(); // Quantity
            model.addRow(row);
            cropsList.add(obj.getCrop());
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToSchedMarketBtn;
    private javax.swing.JButton addToSchedSeasonBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton marketForecastBtn;
    private javax.swing.JLabel marketForecastLabel;
    private javax.swing.JTable marketForecastTable;
    private javax.swing.JTextField marketForecastTxtField;
    private javax.swing.JButton seasonForecastBtn;
    private javax.swing.JLabel seasonForecastLabel;
    private javax.swing.JTable seasonForecastTable;
    private javax.swing.JTextField seasonForecastTxtField;
    // End of variables declaration//GEN-END:variables
}
