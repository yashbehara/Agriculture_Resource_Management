/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.RoleBasedWorkAreas.CropPlannerPanels;

import Business.Models.Crop;
import Business.Models.CropScheduleTechniqueRelation;
import Business.Roles.CropPlanner;
import UserInterface.RoleBasedWorkAreas.CropPlannerJPanel;
import UserInterface.RoleBasedWorkAreas.DataAnalystJPanel;
import static UserInterface.RoleBasedWorkAreas.DataAnalystJPanel.plannedCrops;
import static Utils.HistoricalData.plannedCrops;
import java.awt.CardLayout;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author deepakviswanadh
 */
public class CropPlantingScheduleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CropPlantingScheduleJPanel
     */
    HashMap<Crop, List<CropScheduleTechniqueRelation>> scheduleOfAllCrops;
    CropPlanner cropPlanner;
    ArrayList<Crop> selectedCrops;
    JPanel workAreaJPanel;
;

    public CropPlantingScheduleJPanel(JPanel workAreaJPanel, CropPlanner cropPlanner,
            HashMap<Crop, List<CropScheduleTechniqueRelation>> scheduleOfAllCrops, ArrayList<Crop> selectedCrops
) {
        initComponents();
        this.selectedCrops = selectedCrops;
        this.workAreaJPanel = workAreaJPanel;
        this.scheduleOfAllCrops = scheduleOfAllCrops;
        this.cropPlanner=cropPlanner;
        loadTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plannedCropsTable = new javax.swing.JTable();
        btnAddSchedule = new javax.swing.JButton();
        finishScheduleBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setOpaque(false);

        jLabel1.setBackground(new java.awt.Color(204, 255, 255));
        jLabel1.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel1.setText("Crop Planting Schedule");
        jLabel1.setOpaque(true);

        plannedCropsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Crop Name", "Scheduled Day", "Scheduled Time", "Technique"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        plannedCropsTable.setOpaque(false);
        jScrollPane1.setViewportView(plannedCropsTable);

        btnAddSchedule.setIcon(new javax.swing.ImageIcon("C:\\Users\\deepa\\OneDrive\\Desktop\\plus.png")); // NOI18N
        btnAddSchedule.setText("Add Schedule");
        btnAddSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddScheduleActionPerformed(evt);
            }
        });

        finishScheduleBtn.setText("Finished Scheduling");
        finishScheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishScheduleBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAddSchedule)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(finishScheduleBtn))))
                .addContainerGap(246, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddSchedule)
                    .addComponent(finishScheduleBtn))
                .addContainerGap(171, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void loadTable() {
        DefaultTableModel model = (DefaultTableModel) plannedCropsTable.getModel();
        model.setRowCount(0);
        for (Crop crop : selectedCrops) {
            Object[] data = new Object[4];
            if (cropPlanner.getScheduleOfAllCropsOfPlanner().containsKey(crop)) {
                for (CropScheduleTechniqueRelation cstr : 
                        cropPlanner.getScheduleOfAllCropsOfPlanner().get(crop)) {
                    data[0] = crop;
                    data[1] = cstr.getCropSchedule().getDay();
                    data[2] = cstr.getCropSchedule().getTime();
                    data[3] = cstr.getTechnique();
                    model.addRow(data);
                }
            } else {
                data[0] = crop;
                data[1] = "";
                data[2] = "";
                data[3] = "";
                model.addRow(data);
            }
        }
    }
    private void btnAddScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddScheduleActionPerformed
        // TODO add your handling code here:
        int selectedrow = plannedCropsTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(null, "Select a crop to add schedule");
            return;
        }
        Crop selectedCrop = (Crop) plannedCropsTable.getValueAt(selectedrow, 0);
        CardLayout layout = (CardLayout) workAreaJPanel.getLayout();
        AddScheduleJPanel addScheduleJPanel = new AddScheduleJPanel(workAreaJPanel,
                selectedCrop, cropPlanner);
        workAreaJPanel.add("addScheduleJPanel", addScheduleJPanel);
        layout.next(workAreaJPanel);
        
    }//GEN-LAST:event_btnAddScheduleActionPerformed

    private void finishScheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishScheduleBtnActionPerformed
        // TODO add your handling code here:
        DataAnalystJPanel.cropPlannerList.put(cropPlanner,cropPlanner.getScheduleOfAllCropsOfPlanner());
        DataAnalystJPanel.plannedCrops = selectedCrops;
        DataAnalystJPanel.generateStoreCropRequirements();
        JOptionPane.showMessageDialog(null, "Schedule sent to Harvest Technician !!", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_finishScheduleBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSchedule;
    private javax.swing.JButton finishScheduleBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable plannedCropsTable;
    // End of variables declaration//GEN-END:variables
}
