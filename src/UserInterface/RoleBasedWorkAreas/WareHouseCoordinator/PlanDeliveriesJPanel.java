/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.RoleBasedWorkAreas.WareHouseCoordinator;

import Business.Models.Crop;
import Business.Models.DeliveryShipment;
import Business.Models.StoreCropQuantityRequirement;
import Business.Roles.DeliveryDriver;
import static UserInterface.RoleBasedWorkAreas.DataAnalystJPanel.deliveriesMasterList;
import static UserInterface.RoleBasedWorkAreas.DataAnalystJPanel.eachStoreRequirement;
import static UserInterface.RoleBasedWorkAreas.DataAnalystJPanel.quantityGeneratedPerCrop;
import static Utils.Constants.deliveryDriverNames;
import java.util.List;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author deepakviswanadh
 */
public class PlanDeliveriesJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PlanDeliveriesJPanel
     */
    public List<StoreCropQuantityRequirement> shipmentDetails;
    List<DeliveryDriver> deliveryDriverListAll;

    public PlanDeliveriesJPanel(List<DeliveryDriver> deliveryDriverList) {
        initComponents();
        shipmentDetails = new ArrayList<>();
        this.deliveryDriverListAll = deliveryDriverList;
        loadTableValues();
        populateDrivers();
    }

    public void populateDrivers() {
        for (DeliveryDriver driver : deliveryDriverListAll) {
            deliveryDriverComboBox.addItem(driver.getName());
        }
        deliveryDriverComboBox.setSelectedIndex(0);
    }

    public void loadTableValues() {
        DefaultTableModel model = (DefaultTableModel) deliveriesTable.getModel();
        model.setRowCount(0);
        eachStoreRequirement.forEach(eachStore -> {
            for (Map.Entry<Crop, Integer> each : eachStore.getCropQuantityRelation().entrySet()) {
                Object[] data = new Object[4];
                data[0] = eachStore;
                data[1] = each.getKey().getName();
                data[2] = each.getValue();
                data[3] = quantityGeneratedPerCrop.get(each.getKey());
                model.addRow(data);
            }
        });
    }

    public void loadShipmentTable() {
        DefaultTableModel model = (DefaultTableModel) shipmentTable.getModel();
        model.setRowCount(0);
        shipmentDetails.forEach(eachStore -> {
            for (Map.Entry<Crop, Integer> each : eachStore.getCropQuantityRelation().entrySet()) {
                Object[] data = new Object[3];
                data[0] = eachStore;
                data[1] = each.getKey().getName();
                data[2] = each.getValue();
                model.addRow(data);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deliveriesTable = new javax.swing.JTable();
        btnAddToShipment = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        shipmentTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        deliveryDriverComboBox = new javax.swing.JComboBox<>();
        scheduleDeliveryBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        dropRequirementBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setOpaque(false);
        setLayout(null);

        jLabel1.setBackground(new java.awt.Color(204, 255, 255));
        jLabel1.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel1.setText("Plan Deliveries");
        jLabel1.setOpaque(true);
        add(jLabel1);
        jLabel1.setBounds(180, 40, 103, 20);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        deliveriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Store", "Crop", "Requirement", "Produced"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(deliveriesTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(40, 70, 408, 214);

        btnAddToShipment.setText("Add to Shipment");
        btnAddToShipment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToShipmentActionPerformed(evt);
            }
        });
        add(btnAddToShipment);
        btnAddToShipment.setBounds(460, 160, 130, 22);

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setOpaque(false);

        shipmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Store", "Crop", "Requirement"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(shipmentTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(140, 320, 433, 220);

        jLabel2.setBackground(new java.awt.Color(204, 255, 255));
        jLabel2.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel2.setText("Shipment");
        jLabel2.setOpaque(true);
        add(jLabel2);
        jLabel2.setBounds(340, 290, 66, 18);

        deliveryDriverComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveryDriverComboBoxActionPerformed(evt);
            }
        });
        add(deliveryDriverComboBox);
        deliveryDriverComboBox.setBounds(20, 320, 120, 22);

        scheduleDeliveryBtn.setText("Schedule Delivery");
        scheduleDeliveryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleDeliveryBtnActionPerformed(evt);
            }
        });
        add(scheduleDeliveryBtn);
        scheduleDeliveryBtn.setBounds(248, 563, 140, 22);

        jLabel3.setBackground(new java.awt.Color(204, 255, 255));
        jLabel3.setFont(new java.awt.Font("Bahnschrift", 1, 14)); // NOI18N
        jLabel3.setText("Driver Names");
        jLabel3.setOpaque(true);
        add(jLabel3);
        jLabel3.setBounds(30, 290, 93, 18);

        dropRequirementBtn.setText("Drop Requirement");
        dropRequirementBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRequirementBtnActionPerformed(evt);
            }
        });
        add(dropRequirementBtn);
        dropRequirementBtn.setBounds(394, 563, 140, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddToShipmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToShipmentActionPerformed
        // TODO add your handling code here:
        int selectedrow = deliveriesTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(null, "Select requirement to add to shipment");
            return;
        }
        StoreCropQuantityRequirement requirement = (StoreCropQuantityRequirement) deliveriesTable.getValueAt(selectedrow, 0);
        shipmentDetails.add(requirement);
        loadShipmentTable();
    }//GEN-LAST:event_btnAddToShipmentActionPerformed

    private void scheduleDeliveryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleDeliveryBtnActionPerformed
        // TODO add your handling code here:
        HashMap<Crop, Integer> collectiveRequirements = calculateCollectiveRequirements(shipmentDetails);

        // Check if collective requirements can be met with the current produce
        if (!canMeetCollectiveRequirements(collectiveRequirements, quantityGeneratedPerCrop)) {
            JOptionPane.showMessageDialog(null, "The collective requirement for one or more crops cannot be met with the current produce. Please adjust the requirements.");
            return;
        }

        // Schedule the delivery
        String driverName = (String) deliveryDriverComboBox.getSelectedItem();
        DeliveryShipment newShipment = new DeliveryShipment();
        newShipment.setDeliveryDriver(new DeliveryDriver(driverName, "driver", "driver", driverName));
        newShipment.setStoresListInThatShipment(shipmentDetails);
        deliveriesMasterList.add(newShipment);

        // Update the quantities in quantityGeneratedPerCrop
        updateCropQuantities(collectiveRequirements, quantityGeneratedPerCrop);

        // Refresh UI components
        JOptionPane.showMessageDialog(null, "Delivery successfully scheduled.");
        loadTableValues();
        clearShipmentTable();
    }//GEN-LAST:event_scheduleDeliveryBtnActionPerformed

    private HashMap<Crop, Integer> calculateCollectiveRequirements(List<StoreCropQuantityRequirement> shipmentDetails) {
        HashMap<Crop, Integer> collectiveRequirements = new HashMap<>();
        for (StoreCropQuantityRequirement requirement : shipmentDetails) {
            for (Map.Entry<Crop, Integer> entry : requirement.getCropQuantityRelation().entrySet()) {
                Crop crop = entry.getKey();
                int requiredQuantity = entry.getValue();
                collectiveRequirements.merge(crop, requiredQuantity, Integer::sum);
            }
        }
        return collectiveRequirements;
    }

    private boolean canMeetCollectiveRequirements(HashMap<Crop, Integer> collectiveRequirements, HashMap<Crop, Integer> quantityGeneratedPerCrop) {
        for (Map.Entry<Crop, Integer> entry : collectiveRequirements.entrySet()) {
            Crop crop = entry.getKey();
            int totalRequiredQuantity = entry.getValue();
            int availableQuantity = quantityGeneratedPerCrop.getOrDefault(crop, 0);
            if (totalRequiredQuantity > availableQuantity) {
                return false; // Collective requirement exceeds available quantity
            }
        }
        return true; // All collective requirements can be met
    }

    private void updateCropQuantities(HashMap<Crop, Integer> collectiveRequirements, HashMap<Crop, Integer> quantityGeneratedPerCrop) {
        for (Map.Entry<Crop, Integer> entry : collectiveRequirements.entrySet()) {
            Crop crop = entry.getKey();
            int totalRequiredQuantity = entry.getValue();
            int availableQuantity = quantityGeneratedPerCrop.getOrDefault(crop, 0);
            quantityGeneratedPerCrop.put(crop, availableQuantity - totalRequiredQuantity);
        }
    }

    public void clearShipmentTable() {
        shipmentDetails = new ArrayList<>();
        loadShipmentTable();
    }
    private void dropRequirementBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRequirementBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = shipmentTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0) {
            JOptionPane.showMessageDialog(null, "Select requirement to delete from shipment");
            return;
        }
        StoreCropQuantityRequirement requirement = (StoreCropQuantityRequirement) shipmentTable.getValueAt(selectedrow, 0);
        shipmentDetails.remove(requirement);
        loadShipmentTable();
    }//GEN-LAST:event_dropRequirementBtnActionPerformed

    private void deliveryDriverComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveryDriverComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deliveryDriverComboBoxActionPerformed

    public static boolean checkCropRequirementsForWholeShipment(List<StoreCropQuantityRequirement> shipmentDetails, HashMap<Crop, Integer> quantityGeneratedPerCrop) {
        for (StoreCropQuantityRequirement requirement : shipmentDetails) {
            HashMap<Crop, Integer> cropRequirements = requirement.getCropQuantityRelation();
            for (Map.Entry<Crop, Integer> entry : cropRequirements.entrySet()) {
                Crop crop = entry.getKey();
                int requiredQuantity = entry.getValue();
                int generatedQuantity = quantityGeneratedPerCrop.getOrDefault(crop, 0);
                if (requiredQuantity > generatedQuantity) {
                    return true; // Requirement cannot be met
                }
            }
        }
        return false; // All requirements can be met
    }

    public static boolean subtractCropQuantities(List<StoreCropQuantityRequirement> shipmentDetails, HashMap<Crop, Integer> quantityGeneratedPerCrop) {
        for (StoreCropQuantityRequirement requirement : shipmentDetails) {
            HashMap<Crop, Integer> cropRequirements = requirement.getCropQuantityRelation();
            for (Map.Entry<Crop, Integer> entry : cropRequirements.entrySet()) {
                Crop crop = entry.getKey();
                int requiredQuantity = entry.getValue();
                int generatedQuantity = quantityGeneratedPerCrop.getOrDefault(crop, 0);

                if (generatedQuantity < requiredQuantity) {
                    return false; // Insufficient quantity for this crop
                }

                // Subtract the required quantity from the generated quantity
                quantityGeneratedPerCrop.put(crop, generatedQuantity - requiredQuantity);
            }
        }
        return true; // Successfully subtracted all required quantities
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToShipment;
    private javax.swing.JTable deliveriesTable;
    private javax.swing.JComboBox<String> deliveryDriverComboBox;
    private javax.swing.JButton dropRequirementBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton scheduleDeliveryBtn;
    private javax.swing.JTable shipmentTable;
    // End of variables declaration//GEN-END:variables
}
