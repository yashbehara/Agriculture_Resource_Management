/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.RoleBasedWorkAreas.DeliveryDriver;

import Business.Models.CropSalesRelation;
import Business.Models.DeliveryShipment;
import Business.Models.Store;
import Business.Models.StoreCropQuantityRequirement;
import Business.Roles.DeliveryDriver;
import UserInterface.RoleBasedWorkAreas.DataAnalystJPanel;
import static UserInterface.RoleBasedWorkAreas.DataAnalystJPanel.deliveriesMasterList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kpraneeth
 */
public class DeliverPlanJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DeliverPlanJPanel
     */
    String loggedInPersonName;
    public DeliverPlanJPanel(String loggedInPersonName) {
        initComponents();
        this.loggedInPersonName = loggedInPersonName;
         System.out.println("Logged in-"+this.loggedInPersonName);
        loadTable();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setOpaque(false);

        jLabel1.setBackground(new java.awt.Color(204, 255, 255));
        jLabel1.setFont(new java.awt.Font("Bahnschrift", 1, 18)); // NOI18N
        jLabel1.setText("Delivery Plan");
        jLabel1.setOpaque(true);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Store Name", "Location"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(jLabel1)))
                .addContainerGap(243, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

   private void loadTable() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);

    // Assuming deliveriesMasterList contains all the deliveries
    for (DeliveryShipment shipment : deliveriesMasterList) {
        DeliveryDriver driver = shipment.getDeliveryDriver();

        // Check if the driver's name matches the logged-in driver
        if (driver.getName().equalsIgnoreCase(loggedInPersonName)) {
            for (StoreCropQuantityRequirement storeRequirement : shipment.getStoresListInThatShipment()) {
                Store store = storeRequirement.getStore();

                // Assuming Store class has getStoreName and getStoreLocation methods
                Object[] row = new Object[2];
                row[0] = store.getStoreName();
                row[1] = store.getStoreLocation();
                model.addRow(row);
            }
        }
    }
}

}
